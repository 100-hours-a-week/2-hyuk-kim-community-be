name: Community-Server

on:
  push:
    branches: [ deploy ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3  # v2에서 v3로 업데이트

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4  # v1에서 v4로 업데이트
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          mask-aws-account-id: true  # AWS 계정 ID 마스킹

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2  # v1에서 v2로 업데이트
        with:
          mask-password: true  # Docker 패스워드 마스킹

      - name: Build and push Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: community-server
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG} .
          docker push ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          debug: true  # 디버깅 정보 출력
          script: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ap-northeast-2
            
            export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            export ECR_REPOSITORY=community-server
            export IMAGE_TAG=${{ github.sha }}
            
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            cd ~/app
            chmod +x ./blue-green-deploy.sh
            
            # 디버깅을 위한 추가 명령어들
            echo "Current running containers:"
            docker ps
            
            ./blue-green-deploy.sh || {
              echo "Deployment failed. Checking container logs..."
              CONTAINER_ID=$(docker ps -lq)
              echo "Latest container logs:"
              docker logs $CONTAINER_ID
              exit 1
            }